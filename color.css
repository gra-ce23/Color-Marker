h1{
    text-align: center;
}
/* A function is a piece of code that can take an input and perform a specific action. The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color */
.container{
    background-color: rgb(255, 255, 255);
    padding: 10px 0;
}
.marker{
    width: 200px;
    height: 25px;
    margin: 10px auto;
}
/* A color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart. For example, pure red is between the hues rose and orange. */
/* Two colors that are opposite from each other on the color wheel are called complementary colors. If two complementary colors are combined, they produce gray. But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter. */
.red {
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);
} 
/* The last thing you'll do is add a slight shadow to each marker to make them look even more realistic. */
.cap {
    width: 60px;
    height: 25px;
}
.cap, .sleeve{
    display: inline-block;
}
.sleeve {
    width: 110px;
    height: 25px;
    background-color: rgba(255, 255, 255, 0.5);
    border-left: 10px double rgba(0, 0, 0, 75%);

}
.green {
    background: linear-gradient(#55680D, #71F53E, #116C31);
    box-shadow: 0px 0px 20px 0 #3B7E20CC;

} 
.blue {
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
    box-shadow: 0px 0px 20px 0 hsl(223,59%, 31%, 0.8);

}

/* A very common way to apply color to an element with CSS is with hexadecimal or hex values. While hex values sound complicated, they're really just another form of RGB values. */
/* Hex color values start with a # character and take six characters from 0-9 and A-F. The first pair of characters represent red, the second pair represent green, and the third pair represent blue. For example, #4B5320 */
/* You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0) */
/* The HSL color model, or hue, saturation, and lightness, is another way to represent colors. The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness. */
/* If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees. */
/* Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign % to the saturation and lightness values. */
/* Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral. */
/* You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element. */
/* A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used. */
/* One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value. */
/* The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial: linear-gradient(gradientDirection, color1, color2, ...); */
/* gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl */
/* Now you'll apply a red-to-green gradient along a 90 degree line to the first marker. */
/* Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length unit like px or percentages that follow a color in the linear-gradient function. */

/* BOX-SHADOW: offsetX offsetY color;
Here's how the offsetX and offsetY values work:
. both offsetX and offsetY accept number values in px and other CSS units
. a positive offsetX value moves the shadow right and a negative value moves it left
. a positive offsetY value moves the shadow down and a negative value moves it up
. if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to add a unit. Every browser understands that zero means no change.
    The height and width of the shadow is determined by the height and width of the element it's applied to. You can also use an optional spreadRadius value to spread out the reach of the shadow. More on that later.*/
/* Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property: */
/* box-shadow: offsetX offsetY blurRadius color;
  If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.*/
/* But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:
box-shadow: offsetX offsetY blurRadius spreadRadius color;
Like blurRadius, spreadRadius defaults to 0 if it isn't included.*/
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */

